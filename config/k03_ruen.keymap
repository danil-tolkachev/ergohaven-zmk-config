#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <50>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 29 33 34 35 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <50>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59>;
            hold-trigger-on-release;
        };

        enc_vol: enc_vol {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_VOL";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
        };

        sticky_swap: sticky_swap {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_SWAP";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <500>;
        };

        enc_alt_tab: enc_alt_tab {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_ALT_TAB";
            #sensor-binding-cells = <0>;
            bindings = <&swapper LALT LC(TAB)>, <&swapper LALT LS(LC(TAB))>;
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp RU_CYRILLIC_HA>;
            key-positions = <19 20>;
            layers = <1>;
        };

        hrdsgn {
            bindings = <&kp RU_CYRILLIC_HARD_SIGN>;
            key-positions = <20 21>;
            layers = <1>;
        };

        yo {
            bindings = <&kp RU_CYRILLIC_IO>;
            key-positions = <16 17>;
            layers = <1>;
        };

        cmben {
            bindings = <&layer_en>;
            key-positions = <15 14>;
            layers = <1>;
            require-prior-idle-ms = <200>;
            slow-release;
            timeout-ms = <50>;
        };

        cmbru {
            bindings = <&layer_ru>;
            key-positions = <15 16>;
            layers = <0>;
            require-prior-idle-ms = <200>;
            slow-release;
            timeout-ms = <50>;
        };

        cmben_none {
            bindings = <&none>;
            key-positions = <15 14>;
            layers = <0>;
            require-prior-idle-ms = <200>;
            slow-release;
            timeout-ms = <50>;
        };

        cmbru_none {
            bindings = <&none>;
            key-positions = <15 16>;
            layers = <1>;
            require-prior-idle-ms = <200>;
            slow-release;
            timeout-ms = <50>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <45 46>;
        };

        tmux_hor {
            bindings = <&tmux PRCNT>;
            key-positions = <40 41>;
            layers = <4>;
        };

        tmux_ver {
            bindings = <&tmux DQT>;
            key-positions = <41 29>;
            layers = <4>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(CAPS)>;
            label = "TO_RU";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPS>;
            label = "TO_EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &to_ru>;
            label = "LAYER_RU";
            tap-ms = <30>;
            wait-ms = <0>;
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en>,
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to_ru>;

            label = "EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        tmux: tmux {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp LC(B) &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TMUX";
        };

        swapper: swapper {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &sticky_swap MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "SWAPPER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
&kp GRAVE  &kp N1       &kp N2       &kp N3        &kp N4         &kp N5                                        &kp N6     &kp N7        &kp N8                 &kp N9             &kp N0          &none
&kp UNDER  &kp Q        &kp W        &kp E         &kp R          &kp T                                         &kp Y      &kp U         &kp I                  &kp O              &kp P           &none
&kp MINUS  &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F   &kp G                                         &kp H      &hmr RCTRL J  &hmr RSHFT K           &hmr LALT L        &hmr LGUI SEMI  &none
&none      &kp Z        &kp X        &kp C         &kp V          &kp B          &kp K_MUTE    &kp K_MUTE       &kp N      &kp M         &kp COMMA              &kp DOT            &kp SQT         &none
                        &sk LGUI     &sk LALT      &mt LCTRL ESC  &mt LSHFT RET  &lt 2 TAB     &lt 4 BACKSPACE  &kp SPACE  &none         &swapper LALT LS(TAB)  &swapper LALT TAB
            >;

            display-name = "Base";
            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&enc_alt_tab>,
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>;
        };

        ru {
            display-name = "Ru";
            bindings = <
&kp RU_CYRILLIC_IO  &kp N1                    &kp N2                      &kp N3                     &kp N4                    &kp N5                                            &kp N6              &kp N7                     &kp N8                     &kp N9                    &kp N0                     &kp RU_CYRILLIC_HARD_SIGN
&kp UNDER           &kp RU_CYRILLIC_SHORT_I   &kp RU_CYRILLIC_TSE         &kp RU_CYRILLIC_U          &kp RU_CYRILLIC_KA        &kp RU_CYRILLIC_IE                                &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE        &kp RU_CYRILLIC_SHA        &kp RU_CYRILLIC_SHCHA     &kp RU_CYRILLIC_ZE         &kp RU_CYRILLIC_HA
&kp MINUS           &hml LGUI RU_CYRILLIC_EF  &hml LALT RU_CYRILLIC_YERU  &hml LSHFT RU_CYRILLIC_VE  &hml LCTRL RU_CYRILLIC_A  &kp RU_CYRILLIC_PE                                &kp RU_CYRILLIC_ER  &hmr RCTRL RU_CYRILLIC_O   &hmr RSHFT RU_CYRILLIC_EL  &hmr LALT RU_CYRILLIC_DE  &hmr RGUI RU_CYRILLIC_ZHE  &none
&none               &kp RU_CYRILLIC_YA        &kp RU_CYRILLIC_CHE         &kp RU_CYRILLIC_ES         &kp RU_CYRILLIC_EM        &kp RU_CYRILLIC_I   &trans       &trans           &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE         &kp RU_CYRILLIC_YU        &kp RU_CYRILLIC_E          &none
                                              &sk LGUI                    &sk LALT                   &mt LCTRL ESC             &mt LSHIFT RET      &lt 3 TAB    &lt 4 BACKSPACE  &kp SPACE           &none                      &trans                     &trans
            >;

            sensor-bindings =
                <&enc_vol>,
                <&enc_alt_tab>,
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>,
                <&enc_vol>;
        };

        sym_en {
            bindings = <
&none  &kp N1     &kp N2     &kp N3    &kp N4    &kp N5                                &kp N6     &kp N7     &kp N8     &kp N9     &kp N0    &none
&none  &kp GRAVE  &kp AT     &kp HASH  &kp DLLR  &kp PRCNT                             &kp LBRC   &kp LBKT   &kp RBKT   &kp RBRC   &kp DQT   &none
&none  &kp PLUS   &kp MINUS  &kp LT    &kp GT    &kp EQUAL                             &kp EXCL   &kp LPAR   &kp RPAR   &kp COLON  &kp SEMI  &kp SQT
&none  &kp TILDE  &kp STAR   &kp PIPE  &kp AMPS  &kp BSLH   &trans    &trans           &kp QMARK  &kp CARET  &kp COMMA  &kp DOT    &kp FSLH  &none
                  &none      &none     &none     &none      &none     &lt 5 BACKSPACE  &kp SPACE  &none      &trans     &trans
            >;

            display-name = "Symbols";
        };

        sym_ru {
            display-name = "Symbols";
            bindings = <
&none  &kp N1     &kp N2     &kp N3    &kp N4    &kp N5                                 &kp N6        &kp N7     &kp N8        &kp N9        &kp N0        &none
&none  &en GRAVE  &en AT     &en HASH  &en DLLR  &kp PRCNT                              &en LBRC      &en LBKT   &en RBKT      &en RBRC      &kp RU_DQT    &none
&none  &kp PLUS   &kp MINUS  &en LT    &en GT    &kp EQUAL                              &kp EXCL      &kp LPAR   &kp RPAR      &kp RU_COLON  &kp RU_SEMI   &en SQT
&none  &en TILDE  &kp STAR   &en PIPE  &en AMPS  &kp RU_BSLH  &none    &none            &kp RU_QMARK  &en CARET  &kp RU_COMMA  &kp RU_DOT    &kp RU_SLASH  &none
                  &none      &none     &none     &none        &none    &lt 5 BACKSPACE  &kp SPACE     &none      &trans        &trans
            >;
        };

        nav {
            bindings = <
&kp F12  &kp F1         &kp F2     &kp F3        &kp F4         &kp F5                            &kp F6        &kp F7     &kp F8                     &kp F9                 &kp F10            &kp F11
&none    &kp LC(GRAVE)  &kp LC(W)  &kp LC(LBKT)  &kp LC(RBKT)   &kp LC(T)                         &kp HOME      &kp PG_DN  &kp PG_UP                  &kp END                &kp INS            &kp DEL
&none    &sk LGUI       &sk LALT   &sk LSHFT     &sk LCTRL      &none                             &kp LEFT      &kp DOWN   &kp UP                     &kp RIGHT              &kp LC(BACKSPACE)  &none
&none    &kp LC(Z)      &kp LC(X)  &kp LC(C)     &kp LC(V)      &kp LC(B)         &none    &none  &kp LC(LEFT)  &none      &none                      &kp LC(RIGHT)          &kp LC(FSLH)       &none
                        &none      &none         &mt LCTRL ESC  &mt LSHIFT ENTER  &mo 5    &none  &none         &none      &swapper LALT LS(LC(TAB))  &swapper LALT LC(TAB)
            >;

            display-name = "Navigation";
        };

        adj {
            bindings = <
&bootloader  &trans  &trans          &trans          &trans          &trans                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4         &bt BT_CLR_ALL
&trans       &trans  &kp LA(LG(N1))  &kp LA(LG(N2))  &kp LA(LG(N3))  &trans                    &trans        &kp C_BRI_DN  &kp C_BRI_UP  &trans            &kp PRINTSCREEN      &studio_unlock
&trans       &trans  &kp LA(LG(N4))  &kp LA(LG(N5))  &kp LA(LG(N6))  &trans                    &out OUT_BLE  &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE        &kp LA(PRINTSCREEN)  &trans
&trans       &trans  &kp LA(LG(N7))  &kp LA(LG(N8))  &kp LA(LG(N9))  &trans  &trans    &trans  &out OUT_USB  &kp K_PREV    &kp K_NEXT    &kp K_PLAY_PAUSE  &kp LS(PRINTSCREEN)  &trans
                     &trans          &trans          &trans          &trans  &trans    &trans  &trans        &trans        &trans        &trans
            >;

            display-name = "Adjust";
        };
    };
};
